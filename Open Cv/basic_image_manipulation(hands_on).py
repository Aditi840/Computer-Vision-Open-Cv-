# -*- coding: utf-8 -*-
"""Basic_Image_Manipulation(Hands On).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eLv5lf7GMetKu6Wh9yQxGFyBHxi9u655
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

from zipfile import ZipFile
from urllib.request import urlretrieve

from IPython.display import Image
# %matplotlib inline

"""Download Assets"""

def download_and_unzip(url, save_path):
  print(f"Downloading and extracting assets....", end="")

  #Downloading zip file using urllib package
  urlretrieve(url, save_path)

  try:
    #Extracting zipfile using the zipfile package.
    with ZipFile(save_path) as z:
      #Extract zipfile contents in the same directory
      z.extractall(os.path.split(save_path)[0])

    print("Done")


  except Exception as e:

    print("\nInvalid file.", e)

URL = r"https://www.dropbox.com/s/rys6f1vprily2bg/opencv_bootcamp_assets_NB2.zip?dl=1"

asset_zip_path = os.path.join(os.getcwd(), "opencv_bootcamp_assets_NB2.zip")

#Download if asset zip does not exist
if not os.path.exists(asset_zip_path):
  download_and_unzip(URL, asset_zip_path)

"""Original checkboard image"""

#Read image as grayscale
cb_img = cv2.imread("checkerboard_18x18.png", 0)

#set color map to grayscale for proper rendering
plt.imshow(cb_img, cmap="gray")
print(cb_img)

"""Accessing individual pixels"""

#print the first pixel from the first blackbox
print(cb_img[0,0])

#print the first white pixel to the right of the first black box
print(cb_img[0,6])

"""Modifying image pixels"""

cb_img_copy = cb_img.copy()
cb_img_copy[2,2] = 200
cb_img_copy[2,3] = 200
cb_img_copy[3,2] = 200
cb_img_copy[3,3] = 200

#same as above
#cb_img_copy[2:3, 2:3] = 200

plt.imshow(cb_img_copy, cmap="gray")
print(cb_img_copy)

"""Cropping Images"""

img_NZ_bgr = cv2.imread("New_Zealand_Boat.jpg", cv2.IMREAD_COLOR)
img_NZ_rgb = img_NZ_bgr[:,:,::-1]
plt.imshow(img_NZ_rgb)

"""Crop out the middle region of the image"""

cropped_region = img_NZ_rgb[200:400, 300:600]
plt.imshow(cropped_region)

"""Method 1: Specifying scaling factor using fx and fy"""

resize_cropped_region_2x = cv2.resize(cropped_region, None, fx=2, fy=2)
plt.imshow(resize_cropped_region_2x)

"""Method 2:Specifying the exact size of the output image"""

desired_width = 100
desired_height = 200
dim = (desired_width, desired_height)

#Resize background image to sae size as logo image
resized_cropped_region = cv2.resize(cropped_region, dsize=dim, interpolation=cv2.INTER_AREA)
plt.imshow(resized_cropped_region)

"""Resize while maintaining aspect ratio"""

desired_width = 100
aspect_ratio = desired_width / cropped_region.shape[1]
desired_height = int(cropped_region.shape[0] * aspect_ratio)
dim = (desired_width, desired_height)

resized_cropped_region = cv2.resize(cropped_region, dsize=dim, interpolation = cv2.INTER_AREA)
plt.imshow(resized_cropped_region)

"""Let's actually show the cropped resized image"""

#swap channel order
resize_cropped_region_2x = resize_cropped_region_2x[:,:,::-1]

#save resized image to disk
cv2.imwrite("resized_cropped_region_2x.png", resize_cropped_region_2x)

Image(filename="resized_cropped_region_2x.png")

#swap channel order
cropped_region = cropped_region[:,:,::-1]

#save cropped region
cv2.imwrite("cropped_region.png", cropped_region)
Image(filename="cropped_region.png")

"""Flipping Images,
0 means flipping around x-axis
1 means flipping around y-axis
-1 means flipping around both axes
"""

img_NZ_rgb_flipped_horz = cv2.flip(img_NZ_rgb, 1)
img_NZ_rgb_flipped_vert = cv2.flip(img_NZ_rgb, 0)
img_NZ_rgb_flipped_both = cv2.flip(img_NZ_rgb, -1)

#show the images
plt.figure(figsize=(18,5))
plt.subplot(141);plt.imshow(img_NZ_rgb_flipped_horz);plt.title("Horizontal Flip")
plt.subplot(142);plt.imshow(img_NZ_rgb_flipped_vert);plt.title("Vertical Flip")
plt.subplot(143);plt.imshow(img_NZ_rgb_flipped_both);plt.title("Both Flipped")
plt.subplot(144);plt.imshow(img_NZ_rgb);plt.title("Original")